# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13EIoivAs6znqG6kR5ZenEr_nn9ZqjxeI
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns='Outcome', axis=1)
Y = diabetes_dataset['Outcome']
print(X)
print(Y)
scaler = StandardScaler()
standardized_data = scaler.fit_transform(X)
print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

X_train , X_test , Y_train , Y_test = train_test_split(X,Y, test_size = 0.2 , stratify= Y , random_state=2)
print(X.shape , X_train.shape , X_test.shape)

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train,Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print(training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print(testing_data_accuracy)

input_data = (8,99,84,0,0,35.4,0.388,50)
converstion = np.asarray(input_data)
input_data_resape = converstion.reshape(1,-1)
std_data = scaler.transform(input_data_resape)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0 ) :
  print('the person is not diabetic')
else :
  print('the person is diabetic')

